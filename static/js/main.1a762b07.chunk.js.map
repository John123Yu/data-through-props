{"version":3,"sources":["helpers.js","components/child1.js","components/child2.js","components/parent.js","App.js","serviceWorker.js","index.js"],"names":["random0To99","Math","floor","random","Child1","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","e","preventDefault","randomNumber","mutateState","react_default","a","createElement","className","onClick","number","Component","Child2","Parent","state","child1","child2","mutateChild1","mutateChild2","value","setState","child1_Child1","child2_Child2","App","parent_Parent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAAO,SAASA,IACd,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,cCEJC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFFA,2EAKPU,GACVA,EAAEC,iBACF,IAAIC,EAAelB,IACnBS,KAAKJ,MAAMc,YAAYD,oCAIvB,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,QAASf,KAAKI,aAAtC,qBACoBO,EAAAC,EAAAC,cAAA,YAAOb,KAAKJ,MAAMoB,gBAfRC,aCDfC,cACnB,SAAAA,EAAYtB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IACjBrB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFFA,2EAKPU,GACVA,EAAEC,iBACF,IAAIC,EAAelB,IACnBS,KAAKJ,MAAMc,YAAYD,oCAIvB,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,QAASf,KAAKI,aAAtC,qBACoBO,EAAAC,EAAAC,cAAA,YAAOb,KAAKJ,MAAMoB,gBAfRC,aCGfE,cACnB,SAAAA,EAAYvB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmB,IACjBtB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqB,GAAAhB,KAAAH,KAAMJ,KACDwB,MAAQ,CACXC,OAAQ9B,IACR+B,OAAQ/B,KAEVM,EAAK0B,aAAe1B,EAAK0B,aAAalB,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACpBA,EAAK2B,aAAe3B,EAAK2B,aAAanB,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAPHA,4EASN4B,GACXzB,KAAK0B,SAAS,CACZL,OAAQI,yCAGCA,GACXzB,KAAK0B,SAAS,CACZJ,OAAQG,qCAIV,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAD,CAAQX,OAAQhB,KAAKoB,MAAMC,OAAQX,YAAaV,KAAKuB,eACrDZ,EAAAC,EAAAC,cAACe,EAAD,CAAQZ,OAAQhB,KAAKoB,MAAME,OAAQZ,YAAaV,KAAKwB,uBAxBzBP,aCSrBY,0LARX,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiB,EAAD,cAJUb,cCQEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a762b07.chunk.js","sourcesContent":["export function random0To99() {\n  return Math.floor(Math.random() * 100);\n}\n","import React, { Component } from \"react\";\nimport { random0To99 } from \"../helpers\";\n\nexport default class Child1 extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    let randomNumber = random0To99();\n    this.props.mutateState(randomNumber);\n  }\n\n  render() {\n    return (\n      <div className=\"child1\" onClick={this.handleClick}>\n        Child 1 value is: <span>{this.props.number}</span>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { random0To99 } from \"../helpers\";\nexport default class Child2 extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    let randomNumber = random0To99();\n    this.props.mutateState(randomNumber);\n  }\n\n  render() {\n    return (\n      <div className=\"child2\" onClick={this.handleClick}>\n        Child 2 value is: <span>{this.props.number}</span>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Child1 from \"./child1\";\nimport Child2 from \"./child2\";\nimport { random0To99 } from \"../helpers\";\n\nexport default class Parent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      child1: random0To99(),\n      child2: random0To99()\n    };\n    this.mutateChild1 = this.mutateChild1.bind(this);\n    this.mutateChild2 = this.mutateChild2.bind(this);\n  }\n  mutateChild1(value) {\n    this.setState({\n      child1: value\n    });\n  }\n  mutateChild2(value) {\n    this.setState({\n      child2: value\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Child1 number={this.state.child1} mutateState={this.mutateChild1} />\n        <Child2 number={this.state.child2} mutateState={this.mutateChild2} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Parent from \"./components/parent\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Parent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}